{
  // compilerOptions: TS코드가 컴파일되는 방식 관리
  "compilerOptions": {
    /* Language and Environment */
    "target": "ES6",                                     // 어떤 JS 버전을 대상으로 코드를 컴파일할 것인지
    // "lib": [],                                        // dom으로 작업을 수행하는 항목들(기본 객체, 기능, TS노드)을 지정하게 해주는 옵션

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./src",                               // 루트 폴더 지정

    /* JavaScript Support */
    // 아래 두 옵션은 TS + JS 파일도 함께 검사하고 싶은 경우에 사용
    // "allowJs": true,                                  // TS가 JS 파일을 컴파일할 수 있도록 해줌
    // "checkJs": true,                                  // TS가 컴파일 수행하지 않더라도 구문 검사 및 잠재적 에러 보고해줌

    /* Emit */
    "sourceMap": true,                                   // 입력 파일에 JS파일을 연결하는 최신 브라우저와 개발자 도구 간의 다리 역할
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./dist",                               // 생성된 파일 저장 위치
    "removeComments": true,                              // TS 파일의 모든 주석이 컴파일된 JS 파일에서 제거됨
    // "noEmit": true,                                   // JS 파일 생성 X
    // "noEmitOnError": true,                            // true: error가 나는 TS 파일에 대한 출력 파일(.js)에 생성되지 않음 (기본값은 false)

    /* Type Checking */
    "strict": true,                                      // true: strict 관련 모든 옵션을 개별적으로 설정하는 것과 같음 (모든 옵션이 true로 설정됨)
    // "noImplicitAny": true,                            // 암묵적으로 타입을 any로 설정하지 않음 즉, true일 때 타입을 지정하지 않으면 error
    // "strictNullChecks": true,                         // null 값을 잠재적으로 가질 수 있는 값에 접근하고 작업하는 방식을 TS에게 알려줌
    // "strictFunctionTypes": true,                      // 매개변수와 반환 값에 대해 함수가 어떻게 표시되는지 정의
    // "strictBindCallApply": true,                      // 결합하고 호출하고 적용하는 작업에 유용
    // "noImplicitThis": true,                           // this 키워드와 관련 있으며, TS는 this 키워드를 명확하지 않은 위치에서 사용되면 경고
    // "alwaysStrict": true,                             // strict 모드를 사용하는 생성되는 JS 파일이 추가되도록 제어

    // 코드 품질을 향상시켜주는 옵션으로, 사용되지 않은 변수가 있으면 error 표시
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        // 때론 무언가 반환하고, 때론 반환하지 않는 함수가 있는 경우 error 발생

    // "exclude": [
    //   "**/*.dev.ts", // 모든 폴더에서 ~.dev.ts를 포함하는 파일들 무시
    //   "node_modules" // 보통 node_modules 추가 
    // ], // 'exclude' 옵션을 아ㅖ 지정하지 않으면 'node_modules'는 자동으로 제외됨 

    // 컴파일할 파일들
    // "include": [
    //   ...
    // ], // 'include' 옵션을 아예 지정하지 않으면 모든 파일 컴파일

    // 컴파일하고자 하는 개별 파일만 지정 가능
    // "files": [
    //   "app.ts"
    // ],
  }
}
